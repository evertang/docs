# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/replication-introduction.txt:5
msgid "Replication Introduction"
msgstr "复制介绍"

#: ../source/core/replication-introduction.txt:11
msgid ""
"Replication is the process of synchronizing data across multiple servers."
msgstr "复制是在多台服务器之间同步数据的过程。"

#: ../source/core/replication-introduction.txt:15
msgid "Purpose of Replication"
msgstr "复制的目的"

#: ../source/core/replication-introduction.txt:17
msgid ""
"Replication provides redundancy and increases data availability. With "
"multiple copies of data on different database servers, replication protects "
"a database from the loss of a single server. Replication also allows you to "
"recover from hardware failure and service interruptions. With additional "
"copies of the data, you can dedicate one to disaster recovery, reporting, or "
"backup."
msgstr ""
"复制在为数据提供了冗余同时，也提高了数据的可用性。由于在不同的数据库服务器上"
"拥有多个数据镜像，复制可以有效的防止由于单台服务器故障而导致的数据丢失。复制"
"还能够帮助我们从硬件故障或是服务中断中恢复数据。我们也可以通过增加复制节点来"
"将其用于灾难恢复、报表或是备份。"

#: ../source/core/replication-introduction.txt:24
msgid ""
"In some cases, you can use replication to increase read capacity. Clients "
"have the ability to send read and write operations to different servers. You "
"can also maintain copies in different data centers to increase the locality "
"and availability of data for distributed applications."
msgstr ""
"在某些情况中，我们可以通过复制的方式来提高读的性能。客户端可以将读与写请求分"
"别发送到不同的服务器上。我们还能够通过在其他数据中心建立分布式复制节点的方式"
"来做异地冗灾，以进一步提高可用性。"

#: ../source/core/replication-introduction.txt:31
msgid "Replication in MongoDB"
msgstr "MongoDB中的复制"

#: ../source/core/replication-introduction.txt:33
msgid ""
"A replica set is a group of :program:`mongod` instances that host the same "
"data set. One :program:`mongod`, the primary, receives all write operations. "
"All other instances, secondaries, apply operations from the primary so that "
"they have the same data set."
msgstr ""
"复制集是由一组拥有相同数据集的 :program:`mongod` 实例组成的。其中的一个节点为"
"主节点（Primary），所有的写请求都是在它上面完成的。而其他的节点都是从节点"
"（secondary），从节点接收从主节点上传来的操作并应用，并以此来保证其与主节点的"
"数据集一致。"

#: ../source/core/replication-introduction.txt:38
msgid ""
"The :doc:`primary </core/replica-set-primary>` accepts all write operations "
"from clients. A replica set can have only one primary. [#edge-"
"cases-2-primaries]_ To support replication, the primary records all changes "
"to its data sets in its :doc:`oplog </core/replica-set-oplog>`. For more "
"information on primary node operation, see :doc:`/core/replica-set-primary`."
msgstr ""

#: ../source/core/replication-introduction.txt:47
msgid ""
"The :doc:`secondaries </core/replica-set-secondary>` replicate the primary's"
" oplog and apply the operations to their data sets such that the "
"secondaries' data sets reflect the primary's data set. If the primary is "
"unavailable, the replica set will elect a secondary to be primary. For more "
"information on secondary members, see :doc:`/core/replica-set-secondary`."
msgstr ""
"**投票节点** 将只做投票使用。当 **主节点** 降职变为 **从节点** 的时候，其他的"
"一个 **从节点** 将在选举中被推选为主节点。"

#: ../source/core/replication-introduction.txt:56
msgid ""
"You may add an extra :program:`mongod` instance to a replica set as an "
":doc:`arbiter </core/replica-set-arbiter>`. Arbiters do not maintain a data "
"set. The purpose of an arbiter is to maintain a quorum in a replica set by "
"responding to heartbeat and election requests by other replica set members. "
"Because they do not store a data set, arbiters can be a good way to provide "
"replica set quorum functionality with a cheaper resource cost than a fully "
"functional replica set member with a data set. If your replica set has an "
"even number of members, add an arbiter to obtain a majority of votes in an "
"election for primary. Arbiters do not require dedicated hardware. For more "
"information on arbiters, see :doc:`/core/replica-set-arbiter`."
msgstr ""

#: ../source/core/replication-introduction.txt:70
msgid ""
"An :doc:`arbiter </core/replica-set-arbiter>` will always be an arbiter "
"whereas a :doc:`primary </core/replica-set-primary>` may step down and "
"become a :doc:`secondary </core/replica-set-secondary>` and a "
":doc:`secondary </core/replica-set-secondary>` may become the primary during"
" an election."
msgstr ""

#: ../source/core/replication-introduction.txt:79
msgid "Asynchronous Replication"
msgstr "异步复制"

#: ../source/core/replication-introduction.txt:81
msgid ""
"Secondaries apply operations from the primary asynchronously. By applying "
"operations after the primary, sets can continue to function despite the "
"failure of one or more members. For more information on replication "
"mechanics, see :ref:`replica-set-oplog` and :ref:`replica-set-sync`."
msgstr ""
"从节点从主节点上应用操作的过程是异步的。由于从节点是在主节点之后应用操作的，"
"所以复制集在缺少某些成员的时候仍能继续运行。然而在这种情况下，从节点返回给客"
"户端的数据可能并不是最新的数据。"

#: ../source/core/replication-introduction.txt:88
msgid "Automatic Failover"
msgstr "自动化故障切换"

#: ../source/core/replication-introduction.txt:90
msgid ""
"When a primary does not communicate with the other members of the set for "
"more than 10 seconds, the replica set will attempt to select another member "
"to become the new primary. The first secondary that receives a majority of "
"the votes becomes primary."
msgstr ""
"当主节点无法与复制集中其他成员进行沟通超过10秒时，复制集将尝试推举另一位成员"
"成为新的主节点。这时，第一个获得多数投票的从节点将升职为主节点。"

#: ../source/core/replication-introduction.txt:97
msgid ""
"See :ref:`replica-set-elections` and :ref:`replica-set-rollbacks` for more "
"information."
msgstr ""

#: ../source/core/replication-introduction.txt:101
msgid "Read Operations"
msgstr ""

#: ../source/core/replication-introduction.txt:103
msgid ""
"When a replica set has one and only one primary, reads from that primary "
"provide :term:`strict consistency`. [#edge-cases-2-primaries]_"
msgstr ""
"复制集提供了一些选项来支持实际应用时的需求。例如，:doc:`将一个复制集分布在多"
"个数据中心</core/replica-set-architecture-geographically-distributed>` ，又或"
"是通过设置 :data:`~local.system.replset.members[n].priority` 来控制选举的结"
"果。复制集同时也支持将成员用于报表、灾难恢复或是备份。"

#: ../source/core/replication-introduction.txt:106
msgid ""
"By default, clients read from the primary; however, clients can specify a "
":doc:`read preference </core/read-preference>` to send read operations to "
"secondaries. :ref:`Asynchronous replication <asynchronous-replication>` to "
"secondaries means that reads from secondaries may return data that does not "
"reflect the state of the data on the primary. For information on reading "
"from replica sets, see :doc:`/core/read-preference`."
msgstr ""
"**主节点** 接收所有来自客户端的写操作。一个复制集只能有一个主节点。由于在一个"
"复制集中只有一个成员能够接收写操作，复制集为所有来自主节点的读提供了 **严格的"
"一致性校验** 。主节点通过将所有数据集的变动记录到 :doc:`oplog </core/replica-"
"set-oplog>` 中以支持复制的实现。参见 :doc:`主节点 </core/replica-set-"
"primary>` 获得更多信息。"

#: ../source/core/replication-introduction.txt:114
msgid ""
"In MongoDB, clients can see the results of writes before they are made "
"durable:"
msgstr ""
"**从节点** 将主节点上的oplog复制过来并应用这些操作来修改其自己的数据集以确保"
"从节点的数据集与主节点的数据集一致。一旦主节点不可用了，复制集就会将一个从节"
"点选举成为新的主节点。客户端默认是从主节点进行读操作，但是客户端也可以通过指"
"定 :doc:`复制集读选项 </core/read-preference>` 来将读操作发送给从节点。需要注"
"意的是，在从节点上进行读操作时，所获得的数据可能不是此时主节点上的值。参见 :"
"doc:`从节点 </core/replica-set-secondary>` 获得更多信息。"

#: ../source/includes/list-visibility-of-data.rst:1
msgid ""
"Regardless of :doc:`write concern </reference/write-concern>`, other clients"
" can see the result of the write operations before the write operation is "
"acknowledged to the issuing client."
msgstr ""
"我们也可以为复制集新增一个额外的 :program:`mongod` 实例作为 **投票节点** 。投"
"票节点中并不包含数据集，投票节点的作用仅仅是在选举过程中参与投票。当复制集的"
"成员个数为偶数时，添加一个投票节点可以防止平局的出现，通过多数选票来选举出新"
"的主节点。由于投票节点仅提供投票功能，故无需一个专用的物理机。参见 :doc:`投票"
"节点 </core/replica-set-arbiter>` 获得更多信息。"

#: ../source/includes/list-visibility-of-data.rst:5
msgid ""
"Clients can read data which may be subsequently :doc:`rolled back </core"
"/replica-set-rollbacks>`."
msgstr ""

#: ../source/core/replication-introduction.txt:122
msgid "Additional Features"
msgstr ""
"参见 :ref:`replica-set-oplog` 和 :ref:`replica-set-sync` 获得更多信息。 参"
"见 :ref:`replica-set-read-preference` 获得更多有关读操作与从节点的信息。"

#: ../source/core/replication-introduction.txt:124
msgid ""
"Replica sets provide a number of options to support application needs. For "
"example, you may deploy a replica set with :doc:`members in multiple data "
"centers </core/replica-set-architecture-geographically-distributed>`, or "
"control the outcome of elections by adjusting the "
":data:`~replSetGetConfig.members[n].priority` of some members. Replica sets "
"also support dedicated members for reporting, disaster recovery, or backup "
"functions."
msgstr ""
"参见 :ref:`replica-set-elections` 和 :ref:`replica-set-rollbacks` 获得更多信"
"息。"

#: ../source/core/replication-introduction.txt:133
msgid ""
"See :ref:`replica-set-secondary-only-members`, :ref:`replica-set-hidden-"
"members` and :ref:`replica-set-delayed-members` for more information."
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
msgid ""
"In some circumstances, two nodes in a replica set may *transiently* believe "
"that they are the primary, but at most, one of them will be able to complete"
" writes with :ref:`{w: majority} write concern <wc-w>`. The node that can "
"complete :ref:`{w: majority} <wc-w>` writes is the current primary, and the "
"other node is a former primary that has not yet recognized its demotion, "
"typically due to a :term:`network partition`. When this occurs, clients that"
" connect to the former primary may observe stale data despite having "
"requested read preference :readmode:`primary`."
msgstr "在某些场景下，一个复制集里面的两个节点可能会短时间的认为他们都是主节点。"
"但是只有其中一个节点可以接受 :ref:`{w: majority} write concern <wc-w>` 。可以接受:ref:`{w: majority} write concern <wc-w>`写入"
"的就是真正的主节点。另外一个是原先的主节点，一般由于网络隔断问题还未及时意识到自己已经被降级。"
"当这个发生时，连接到这个前主节点的客户端可能会看到一些过时的数据，哪怕是读选项使用的是 :readmode:`primary`。"

#: ../source/includes/extracts/additional-resources-replication-introduction.rst:4
msgid "Additional Resources"
msgstr ""

#: ../source/includes/extracts/additional-resources-replication-introduction.rst:6
msgid ""
"`Quick Reference Cards <https://www.mongodb.com/lp/misc/quick-reference-"
"cards?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-replication-introduction.rst:7
msgid ""
"`Webinar: Managing Your Mission Critical App - Ensuring Zero Downtime "
"<http://www.mongodb.com/webinar/managing-mission-critical-app-"
"downtime?jmp=docs>`_"
msgstr ""
